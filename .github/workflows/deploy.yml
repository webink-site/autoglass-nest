name: Deploy to VPS

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Тестирование и сборка
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test123
          POSTGRES_DB: test_aglass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Run database migrations
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:test123@localhost:5432/test_aglass?schema=public

    - name: Run linting
      run: npm run lint

    - name: Run tests
      run: npm run test -- --passWithNoTests
      env:
        DATABASE_URL: postgresql://postgres:test123@localhost:5432/test_aglass?schema=public

    - name: Build application
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 1

  # Сборка Docker образа
  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Деплой на production сервер
  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to server
      run: |
        # Создаем временный файл с переменными окружения
        cat > .env.prod << EOF
        NODE_ENV=production
        POSTGRES_DB=${{ secrets.POSTGRES_DB }}
        POSTGRES_USER=${{ secrets.POSTGRES_USER }}
        POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
        EOF
        
        # Копируем файлы на сервер
        scp -r docker-compose.prod.yml nginx/ .env.prod ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/autoglass/
        
        # Выполняем деплой на сервере
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          cd ~/autoglass
          
          # Логин в GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Обновляем образы
          docker compose -f docker-compose.prod.yml pull
          
          # Создаем необходимые директории
          mkdir -p logs/nginx uploads backups frontend/dist
          
          # Останавливаем старые контейнеры
          docker compose -f docker-compose.prod.yml down
          
          # Запускаем обновленные контейнеры
          docker compose -f docker-compose.prod.yml up -d --remove-orphans
          
          # Очищаем неиспользуемые образы
          docker system prune -af
          
          echo "Deployment completed successfully!"
        EOF

    - name: Health check
      run: |
        # Ждем 30 секунд для запуска сервисов
        sleep 30
        
        # Проверяем здоровье API
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          # Проверяем статус контейнеров
          cd ~/autoglass
          docker compose -f docker-compose.prod.yml ps
          
          # Проверяем логи
          docker compose -f docker-compose.prod.yml logs --tail=50 api
        EOF

    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
          exit 1
        fi

  # Деплой на staging (если есть ветка development)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/development'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging server..."
        # Аналогичный процесс для staging сервера
        # Можно использовать тот же код, но с другими secrets для staging
